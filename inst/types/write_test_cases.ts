// generate json to compare with what is generated from R
import { writeFileSync } from 'fs';

// sort the output objects by key so we can ensure we are 
// checking the JSON generated by R in the same order
function sortKeys(obj: any) {
  const res = Object.keys(obj)
    .sort()
    .reduce((acc, key) => ({
        ...acc, [key]: obj[key]
    }), {})
  return res;
}

function writeCase(obj: any, name: string) {
  writeFileSync(`${prefix}/${name}.json`,
    JSON.stringify(sortKeys(obj)));
}

import {
  NumberMeta,
  StringMeta,
  FactorMeta,
  DateMeta,
  DatetimeMeta,
  HrefMeta,
  GeoMeta,
  GraphMeta,
} from './meta_classes';

// const prefix = 'inst/types/json'
const prefix = 'json'

const meta_num_min = new NumberMeta({ varname: 'numvar' });
writeCase(meta_num_min, 'meta_num_min');

const meta_num_full = new NumberMeta({
  varname: 'numvar',
  label: 'numvar label',
  tags: ['a', 'b', 'c'],
  digits: 2,
  locale: false
});
writeCase(meta_num_full, 'meta_num_full');

const meta_string = new StringMeta({ varname: 'stringvar' });
writeCase(meta_string, 'meta_string');

const meta_fac = new FactorMeta({
  varname: 'facvar',
  levels: ['l1', 'l2', 'l3']
});
writeCase(meta_fac, 'meta_fac');

const meta_dt = new DateMeta({ varname: 'datevar' })
writeCase(meta_dt, 'meta_dt');

const meta_dttm = new DatetimeMeta({ varname: 'datetimevar' })
writeCase(meta_dttm, 'meta_dttm');

const meta_href = new HrefMeta({ varname: 'hrefvar' })
writeCase(meta_href, 'meta_href');

const meta_geo = new GeoMeta({ varname: 'geovar' })
writeCase(meta_geo, 'meta_geo');

const meta_grph = new GraphMeta({
  varname: 'graphvar',
  idvarname: 'idvar'
})
writeCase(meta_grph, 'meta_grph');
